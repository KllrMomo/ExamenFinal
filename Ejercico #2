
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX_TOKENS 100
#define TABLE_SIZE 100

// Función que simula split en C
char** split(const char* str, const char* delimiter, int* count) {
    // Crear un arreglo para almacenar los tokens
    char** tokens = (char**)malloc(MAX_TOKENS * sizeof(char*));
    char* tempStr = strdup(str);  // Hacemos una copia de la cadena para no modificar la original
    char* token;

    *count = 0;  // Contador de tokens

    // Usamos strtok para dividir la cadena
    token = strtok(tempStr, delimiter);
    while (token != NULL) {
        tokens[*count] = strdup(token);  // Almacenamos el token en el arreglo
        (*count)++;
        token = strtok(NULL, delimiter);
    }

    return tokens;  // Regresamos el arreglo de tokens
}

// Estructura para la tabla hash
typedef struct HashNode {
    char* key;
    int value;
    struct HashNode* next;
} HashNode;

// Función de hash simple (basada en el valor ASCII de los caracteres)
unsigned int hash(const char* key) {
    unsigned int hashValue = 0;
    while (*key) {
        hashValue = hashValue * 31 + *key++;  // Usamos un valor primo (31) como multiplicador
    }
    return hashValue % TABLE_SIZE;
}

// Función para insertar o actualizar una palabra en la tabla hash
void insert(HashNode** table, const char* key) {
    unsigned int index = hash(key);
    HashNode* current = table[index];

    // Buscar si la palabra ya existe en la tabla
    while (current != NULL) {
        if (strcmp(current->key, key) == 0) {
            current->value++;  // Si la palabra ya está en la tabla, incrementamos su contador
            return;
        }
        current = current->next;
    }

    // Si la palabra no está en la tabla, la insertamos
    HashNode* newNode = (HashNode*)malloc(sizeof(HashNode));
    newNode->key = strdup(key);
    newNode->value = 1;  // Inicializamos la frecuencia en 1
    newNode->next = table[index];
    table[index] = newNode;
}

// Función para liberar la memoria de la tabla hash
void freeTable(HashNode** table) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        HashNode* current = table[i];
        while (current != NULL) {
            HashNode* temp = current;
            current = current->next;
            free(temp->key);
            free(temp);
        }
    }
}

// Función para mostrar la frecuencia de las palabras
void printFrequencies(HashNode** table) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        HashNode* current = table[i];
        while (current != NULL) {
            printf("%s: %d\n", current->key, current->value);
            current = current->next;
        }
    }
}

int main() {
    const char* text = "la programacion es divertida la programacion es facil";
    const char* delimiter = " ";  // Delimitador por espacio
    int count = 0;

    // Llamamos a la función split para dividir el texto en palabras
    char** tokens = split(text, delimiter, &count);

    // Creamos una tabla hash vacía
    HashNode* hashTable[TABLE_SIZE] = {0};

    // Insertamos las palabras en la tabla hash
    for (int i = 0; i < count; i++) {
        insert(hashTable, tokens[i]);
        free(tokens[i]);  // Liberamos cada token
    }

    free(tokens);  // Liberamos el arreglo de punteros

    printf("la frase es: la programacion es divertida la programacion es facil \n");

    // Mostramos la frecuencia de las palabras
    printf("Frecuencia de palabras:\n");
    printFrequencies(hashTable);

    // Liberamos la memoria de la tabla hash
    freeTable(hashTable);

    return 0;
}
